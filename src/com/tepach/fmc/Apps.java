/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.tepach.fmc;

import java.awt.FileDialog;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import javax.swing.JOptionPane;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.io.LineIterator;
import org.apache.log4j.Logger;

/**
 *
 * @author Anthony Tepach
 */
public class Apps extends javax.swing.JFrame {

    int contador = 0;
    /**
     * Creates new form Apps
     */
    private static Logger logDatos = Logger.getLogger(Apps.class);
    ArrayList<String> hola = new ArrayList();
    Stack<String> pila = new Stack<String>();

    public Apps() {
        initComponents();
        jLabel1_folios.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jtff_ini = new javax.swing.JTextField();
        jtf_fin = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1_folios = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FMC FOLIOS");
        setResizable(false);
        getContentPane().setLayout(new java.awt.CardLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setText("Folio Inicial");

        jLabel4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel4.setText("Folio Final");

        jtff_ini.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jtff_ini.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtff_iniKeyTyped(evt);
            }
        });

        jtf_fin.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jtf_fin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtf_finKeyTyped(evt);
            }
        });

        jButton1.setText("Generar BD");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1_folios.setText("Folios generados: ");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/tepach/fmc/ortdjsn.jpg"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jtff_ini, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jtf_fin, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(41, 41, 41))
            .addComponent(jLabel1_folios, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtff_ini, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtf_fin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1_folios)
                .addGap(0, 0, 0))
        );

        getContentPane().add(jPanel1, "card2");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        if (!jtff_ini.getText().isEmpty() && !jtf_fin.getText().isEmpty()) {
            int folini = Integer.parseInt(jtff_ini.getText());
            int folfin = Integer.parseInt(jtf_fin.getText());
            if (folini > folfin) {
                JOptionPane.showMessageDialog(rootPane, "El folio inicial no debe ser mayor al folio final.", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                if ((folfin-folini)==1000000) {
                    generarDV(folini, folfin);
                }else{
                JOptionPane.showMessageDialog(rootPane, "Solo puedes crear bases de 1,000,000 de folios");
                }
                

            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jtff_iniKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtff_iniKeyTyped
        char caracter = evt.getKeyChar();
        if (((caracter < '0')
                || (caracter > '9'))
                && (caracter != '\b')) {
            evt.consume();
        }
    }//GEN-LAST:event_jtff_iniKeyTyped

    private void jtf_finKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_finKeyTyped
        char caracter = evt.getKeyChar();
        if (((caracter < '0')
                || (caracter > '9'))
                && (caracter != '\b')) {
            evt.consume();
        }
    }//GEN-LAST:event_jtf_finKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Apps.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Apps.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Apps.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Apps.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Apps().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel1_folios;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jtf_fin;
    private javax.swing.JTextField jtff_ini;
    // End of variables declaration//GEN-END:variables

    private String resuido(int cont) {
        return String.valueOf(cont % 11);
    }

    private String letrasAl() {
        int num1 = 97;
        int num2 = 122;
        char c = 0;
        int numAleatorio = (int) Math.floor(Math.random() * (num2 - num1) + num1);
        return "" + (char) numAleatorio;
    }

    private int DV(int resuido) {
        int dv;
        if (String.valueOf(resuido).length() > 1) {
            dv = Integer.parseInt(String.valueOf(resuido).substring(0, 1));
        } else {
            dv = resuido;
        }
        return dv;
    }

    private String getRuta() {
        String ruta = null;
        FileDialog dialogoArchivo;
        dialogoArchivo = new FileDialog(this, "Guardar como...", FileDialog.SAVE);
        dialogoArchivo.setVisible(true);
        ruta = dialogoArchivo.getDirectory() + dialogoArchivo.getFile();
        return ruta;
    }

    private String getPath() {
        FileDialog dialogoArchivo;
        dialogoArchivo = new FileDialog(this, "Guardar como...", FileDialog.LOAD);
        dialogoArchivo.setVisible(true);
        return dialogoArchivo.getDirectory() + dialogoArchivo.getFile();
    }

    private void generartxt(Stack<String> pila, String ruta) {
        if (ruta == null || ruta == "") {
            JOptionPane.showMessageDialog(rootPane, "Debes seleccionar una ruta", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            FileWriter fichero = null;
            PrintWriter pw = null;
            try {
                if (!ruta.contains(".txt")) {
                    ruta = ruta.concat(".txt");
                }
                fichero = new FileWriter(ruta);
                pw = new PrintWriter(fichero);
                while (!pila.empty()) {
                    pw.println(pila.pop());
                }
                pw.close();
                fichero.close();
                JOptionPane.showMessageDialog(rootPane, "Se guardando en: \n" + ruta, "Exito", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }

   

    private void archivoNuevo(Stack<String> pila, String[][] matriz, String ruta) {
        FileWriter fichero = null;
        PrintWriter pw = null;
        try {
            if (!ruta.contains(".txt")) {
                ruta = ruta.concat(".txt");
            }
            fichero = new FileWriter(ruta);
            pw = new PrintWriter(fichero);
            for (int f = 0; f < matriz.length; f++) {
                for (int c = 0; c < matriz[f].length; c++) {
                    pw.print(matriz[f][c] + "\t");
                }
                pw.println();
            }
            //pw.println("0000000x0\t0000000x0\t0000000x0\t0000000x0\t0000000x0\t0000000x0\t" + pila.pop());
            pw.close();
            fichero.close();

            JOptionPane.showMessageDialog(rootPane, "Se guardando en: \n" + ruta, "Exito", JOptionPane.INFORMATION_MESSAGE);

        } catch (IOException ex) {
            ex.printStackTrace();
        }

    }

    private void generarDV(int folini, int folfin) {
        int sumas = 0;
        int p = 0;
        int resta = folfin - folini;
        for (int i = 0; i < 1000; i++) {
            pila.push("0000000" + letrasAl().toUpperCase() + 0);
        }

        for (int i = folini; i < folfin; i++) {
            String smu = String.valueOf(i + 1);
            //System.out.println("SMU: "+smu);
            int[] asuma = new int[smu.length()];
            int nums = Integer.parseInt(smu);
            for (int j = 0; j < smu.length(); j++) {
                int num = j + 1;
                sumas = Integer.parseInt(smu.substring(j, num));
                int mult = 0;
                mult = sumas * num;
                int cont = 0;

                asuma[j] = mult;
                int total = 0;
                for (int k = 0; k < asuma.length; k++) {
                    total += asuma[k];
                }
                if (j == smu.length() - 1) {
                    this.pila.push(smu + letrasAl().toUpperCase() + DV(Integer.parseInt(resuido(total))));
                }
            }
        }

        this.jLabel1_folios.setText("Folios creados: " + this.pila.size());
        String rute = getRuta();
        File salida=new File(rute);
        String archivo=salida.getName();
        String carpeta=salida.getParent();
        GenerarArchivos(pila, archivo,carpeta);
    }



    private void GenerarArchivos(Stack<String> pila, String archivo,String carpeta) {
        if (pila.size() < 70000) {
            if (!pila.empty()) {
                int particion = pila.size() / 7;
            String matriz[][] = new String[particion][7];
            for (int f = 0; f < matriz.length; f++) {
                matriz[f][0] = pila.pop();
            }
            for (int f = 0; f < matriz.length; f++) {
                matriz[f][1] = pila.pop();
            }
            for (int f = 0; f < matriz.length; f++) {
                matriz[f][2] = pila.pop();
            }
            for (int f = 0; f < matriz.length; f++) {
                matriz[f][3] = pila.pop();
            }
            for (int f = 0; f < matriz.length; f++) {
                matriz[f][4] = pila.pop();
            }
            for (int f = 0; f < matriz.length; f++) {
                matriz[f][5] = pila.pop();
            }
            for (int f = 0; f < matriz.length; f++) {
                matriz[f][6] = pila.pop();
            }
             crearArchivosVarios(pila, matriz, archivo,carpeta);
            }else{
                JOptionPane.showMessageDialog(rootPane, "Se guardo en: \n"+carpeta,"Saliendo",JOptionPane.INFORMATION_MESSAGE);
                System.exit(0);
            }
        } else {
            String matriz[][] = new String[10000][7];
            for (int f = 0; f < matriz.length; f++) {
                matriz[f][0] = pila.pop();
            }
            for (int f = 0; f < matriz.length; f++) {
                matriz[f][1] = pila.pop();
            }
            for (int f = 0; f < matriz.length; f++) {
                matriz[f][2] = pila.pop();
            }
            for (int f = 0; f < matriz.length; f++) {
                matriz[f][3] = pila.pop();
            }
            for (int f = 0; f < matriz.length; f++) {
                matriz[f][4] = pila.pop();
            }
            for (int f = 0; f < matriz.length; f++) {
                matriz[f][5] = pila.pop();
            }
            for (int f = 0; f < matriz.length; f++) {
                matriz[f][6] = pila.pop();
            }
            crearArchivosVarios(pila, matriz, archivo,carpeta);
        }

    }

    private void crearArchivosVarios(Stack<String> pila, String[][] matriz, String archivo,String carpeta) {
        contador++;
        FileWriter fichero = null;
        PrintWriter pw = null;
        try {
            if (!archivo.contains(".txt")) {
                archivo = archivo.concat(".txt");
            }
            fichero = new FileWriter(carpeta+"/"+contador+"-particion-"+archivo);
            pw = new PrintWriter(fichero);
            for (int i = 0; i <= 30; i++) {
                pw.println("0000000x0\t0000000x0\t0000000x0\t0000000x0\t0000000x0\t0000000x0\t0000000x0");
            }
            for (int f = 0; f < matriz.length; f++) {
                for (int c = 0; c < matriz[f].length; c++) {
                    pw.print(matriz[f][c] + "\t");
                }
                pw.println();
            }
            //pw.println("0000000x0\t0000000x0\t0000000x0\t0000000x0\t0000000x0\t0000000x0\t" + pila.pop());
           for (int i = 0; i <= 30; i++) {
                pw.println("0000000x0\t0000000x0\t0000000x0\t0000000x0\t0000000x0\t0000000x0\t0000000x0");
            }
            pw.close();
            fichero.close();

            //JOptionPane.showMessageDialog(rootPane, "Se guardando en: \n" + rute, "Exito", JOptionPane.INFORMATION_MESSAGE);

        } catch (IOException ex) {
            ex.printStackTrace();
        }
        GenerarArchivos(pila, archivo,carpeta);
    }

}
